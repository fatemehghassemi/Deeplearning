{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.6"
    },
    "colab": {
      "name": "building-a-captcha-ocr-in-tf2-0.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/fatemehghassemi/Deeplearning/blob/main/OCR-Final-Project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hGzM1-D75A6E",
        "outputId": "a9e3bb65-7a90-47ba-ff48-2f084e5ed9f6"
      },
      "source": [
        "import os\n",
        "import cv2\n",
        "import numpy as np \n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from pathlib import Path\n",
        "from collections import Counter\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "print(\"Tensorflow version: \", tf.__version__)\n",
        "\n",
        "seed = 1234\n",
        "np.random.seed(seed)\n",
        "tf.random.set_seed(seed)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Tensorflow version:  2.5.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WEu_gaFW8iSh",
        "outputId": "7f767cb7-1b78-487e-d098-ac438802541d"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_n-qdRf6AvcY"
      },
      "source": [
        "data_dir = Path(\"/content/drive/MyDrive/Colab Notebooks/captcha_images_v2/captcha_images_v2\")"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HExAC8SCBuad",
        "outputId": "52306b12-0856-4eb8-fc58-0bd8e223c9d9"
      },
      "source": [
        "# Get list of all the images\n",
        "images = list(data_dir.glob(\"*.png\"))\n",
        "print(\"Number of images found: \", len(images))"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of images found:  1040\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
        "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 220
        },
        "id": "ue36rArp5A6J",
        "outputId": "865371b2-4360-4de8-c1df-319bd550dc8a"
      },
      "source": [
        "# Let's take a look at some samples first. \n",
        "# Always look at your data!\n",
        "sample_images = images[:4]\n",
        "\n",
        "_,ax = plt.subplots(2,2, figsize=(5,3))\n",
        "for i in range(4):\n",
        "    img = cv2.imread(str(sample_images[i]))\n",
        "    print(\"Shape of image: \", img.shape)\n",
        "    ax[i//2, i%2].imshow(img)\n",
        "    ax[i//2, i%2].axis('off')\n",
        "plt.show()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Shape of image:  (50, 200, 3)\n",
            "Shape of image:  (50, 200, 3)\n",
            "Shape of image:  (50, 200, 3)\n",
            "Shape of image:  (50, 200, 3)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x216 with 4 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "dElUwhU25A6K",
        "outputId": "81493685-73c2-44fb-eac1-5e44dab83a93"
      },
      "source": [
        "# Store all the characters in a set\n",
        "characters = set()\n",
        "\n",
        "# A list to store the length of each captcha\n",
        "captcha_length = []\n",
        "\n",
        "# Store image-label info\n",
        "dataset = []\n",
        "\n",
        "# Iterate over the dataset and store the\n",
        "# information needed\n",
        "for img_path in images:\n",
        "    # 1. Get the label associated with each image\n",
        "    label = img_path.name.split(\".png\")[0]\n",
        "    # 2. Store the length of this cpatcha\n",
        "    captcha_length.append(len(label))\n",
        "    # 3. Store the image-label pair info\n",
        "    dataset.append((str(img_path), label))\n",
        "    \n",
        "    # 4. Store the characters present\n",
        "    for ch in label:\n",
        "        characters.add(ch)\n",
        "\n",
        "# Sort the characters        \n",
        "characters = sorted(characters)\n",
        "\n",
        "# Convert the dataset info into a dataframe\n",
        "dataset = pd.DataFrame(dataset, columns=[\"img_path\", \"label\"], index=None)\n",
        "\n",
        "# Shuffle the dataset\n",
        "dataset = dataset.sample(frac=1.).reset_index(drop=True)\n",
        "\n",
        "\n",
        "print(\"Number of unqiue charcaters in the whole dataset: \", len(characters))\n",
        "print(\"Maximum length of any captcha: \", max(Counter(captcha_length).keys()))\n",
        "print(\"Characters present: \", characters)\n",
        "print(\"Total number of samples in the dataset: \", len(dataset))\n",
        "dataset.head()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of unqiue charcaters in the whole dataset:  19\n",
            "Maximum length of any captcha:  5\n",
            "Characters present:  ['2', '3', '4', '5', '6', '7', '8', 'b', 'c', 'd', 'e', 'f', 'g', 'm', 'n', 'p', 'w', 'x', 'y']\n",
            "Total number of samples in the dataset:  1040\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>img_path</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>/content/drive/MyDrive/Colab Notebooks/captcha...</td>\n",
              "      <td>2nx38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>/content/drive/MyDrive/Colab Notebooks/captcha...</td>\n",
              "      <td>x3fwf</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>/content/drive/MyDrive/Colab Notebooks/captcha...</td>\n",
              "      <td>43p5d</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>/content/drive/MyDrive/Colab Notebooks/captcha...</td>\n",
              "      <td>m5ym2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>/content/drive/MyDrive/Colab Notebooks/captcha...</td>\n",
              "      <td>6mege</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                            img_path  label\n",
              "0  /content/drive/MyDrive/Colab Notebooks/captcha...  2nx38\n",
              "1  /content/drive/MyDrive/Colab Notebooks/captcha...  x3fwf\n",
              "2  /content/drive/MyDrive/Colab Notebooks/captcha...  43p5d\n",
              "3  /content/drive/MyDrive/Colab Notebooks/captcha...  m5ym2\n",
              "4  /content/drive/MyDrive/Colab Notebooks/captcha...  6mege"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L8lnm52h5A6L",
        "outputId": "50e658d6-0685-4747-d46d-8fd56b62154c"
      },
      "source": [
        "# Split the dataset into training and validation sets\n",
        "training_data, validation_data = train_test_split(dataset, test_size=0.1, random_state=seed)\n",
        "\n",
        "training_data = training_data.reset_index(drop=True)\n",
        "validation_data = validation_data.reset_index(drop=True)\n",
        "\n",
        "print(\"Number of training samples: \", len(training_data))\n",
        "print(\"Number of validation samples: \", len(validation_data))"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of training samples:  936\n",
            "Number of validation samples:  104\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zuB3ryEC9iFE"
      },
      "source": [
        "# Map text to numeric labels \n",
        "char_to_labels = {char:idx for idx, char in enumerate(characters)}\n",
        "\n",
        "# Map numeric labels to text\n",
        "labels_to_char = {val:key for key, val in char_to_labels.items()}"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "56OMQF6x9pAu"
      },
      "source": [
        "# Sanity check for corrupted images\n",
        "def is_valid_captcha(captcha):\n",
        "    for ch in captcha:\n",
        "        if not ch in characters:\n",
        "            return False\n",
        "    return True"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JuXMvBLl9vlR"
      },
      "source": [
        "# Store arrays in memory as it's not a muvh big dataset\n",
        "def generate_arrays(df, resize=True, img_height=50, img_width=200):\n",
        "    \"\"\"Generates image array and labels array from a dataframe.\n",
        "    \n",
        "    Args:\n",
        "        df: dataframe from which we want to read the data\n",
        "        resize (bool)    : whether to resize images or not\n",
        "        img_weidth (int): width of the resized images\n",
        "        img_height (int): height of the resized images\n",
        "        \n",
        "    Returns:\n",
        "        images (ndarray): grayscale images\n",
        "        labels (ndarray): corresponding encoded labels\n",
        "    \"\"\"\n",
        "    \n",
        "    num_items = len(df)\n",
        "    images = np.zeros((num_items, img_height, img_width), dtype=np.float32)\n",
        "    labels = [0]*num_items\n",
        "    \n",
        "    for i in range(num_items):\n",
        "        img = cv2.imread(df[\"img_path\"][i])\n",
        "        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
        "        \n",
        "        if resize: \n",
        "            img = cv2.resize(img, (img_width, img_height))\n",
        "        \n",
        "        img = (img/255.).astype(np.float32)\n",
        "        label = df[\"label\"][i]\n",
        "        \n",
        "        # Add only if it is a valid captcha\n",
        "        if is_valid_captcha(label):\n",
        "            images[i, :, :] = img\n",
        "            labels[i] = label\n",
        "    \n",
        "    return images, np.array(labels)"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mcLdJJNJ921Q",
        "outputId": "3eb4bb9e-bf11-449d-ebbd-2328da9aa79c"
      },
      "source": [
        "# Build training data\n",
        "training_data, training_labels = generate_arrays(df=training_data)\n",
        "print(\"Number of training images: \", training_data.shape)\n",
        "print(\"Number of training labels: \", training_labels.shape)\n",
        "\n",
        "\n",
        "# Build validation data\n",
        "validation_data, validation_labels = generate_arrays(df=validation_data)\n",
        "print(\"Number of validation images: \", validation_data.shape)\n",
        "print(\"Number of validation labels: \", validation_labels.shape)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Number of training images:  (936, 50, 200)\n",
            "Number of training labels:  (936,)\n",
            "Number of validation images:  (104, 50, 200)\n",
            "Number of validation labels:  (104,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XJEfFKwg5A6O"
      },
      "source": [
        "class DataGenerator(keras.utils.Sequence):\n",
        "    \"\"\"Generates batches from a given dataset.\n",
        "    \n",
        "    Args:\n",
        "        data: training or validation data\n",
        "        labels: corresponding labels\n",
        "        char_map: dictionary mapping char to labels\n",
        "        batch_size: size of a single batch\n",
        "        img_width: width of the resized\n",
        "        img_height: height of the resized\n",
        "        downsample_factor: by what factor did the CNN downsample the images\n",
        "        max_length: maximum length of any captcha\n",
        "        shuffle: whether to shuffle data or not after each epoch\n",
        "    Returns:\n",
        "        batch_inputs: a dictionary containing batch inputs \n",
        "        batch_labels: a batch of corresponding labels \n",
        "    \"\"\"\n",
        "    \n",
        "    def __init__(self,\n",
        "                 data,\n",
        "                 labels,\n",
        "                 char_map,\n",
        "                 batch_size=16,\n",
        "                 img_width=200,\n",
        "                 img_height=50,\n",
        "                 downsample_factor=4,\n",
        "                 max_length=5,\n",
        "                 shuffle=True\n",
        "                ):\n",
        "        self.data = data\n",
        "        self.labels = labels\n",
        "        self.char_map = char_map\n",
        "        self.batch_size = batch_size\n",
        "        self.img_width = img_width\n",
        "        self.img_height = img_height\n",
        "        self.downsample_factor = downsample_factor\n",
        "        self.max_length = max_length\n",
        "        self.shuffle = shuffle\n",
        "        self.indices = np.arange(len(data))    \n",
        "        self.on_epoch_end()\n",
        "        \n",
        "    def __len__(self):\n",
        "        return int(np.ceil(len(self.data) / self.batch_size))\n",
        "    \n",
        "    def __getitem__(self, idx):\n",
        "        # 1. Get the next batch indices\n",
        "        curr_batch_idx = self.indices[idx*self.batch_size:(idx+1)*self.batch_size]\n",
        "        \n",
        "        # 2. This isn't necessary but it can help us save some memory\n",
        "        # as not all batches the last batch may not have elements\n",
        "        # equal to the batch_size \n",
        "        batch_len = len(curr_batch_idx)\n",
        "        \n",
        "        # 3. Instantiate batch arrays\n",
        "        batch_images = np.ones((batch_len, self.img_width, self.img_height, 1),\n",
        "                               dtype=np.float32)\n",
        "        batch_labels = np.ones((batch_len, self.max_length), dtype=np.float32)\n",
        "        input_length = np.ones((batch_len, 1), dtype=np.int64) * \\\n",
        "                                (self.img_width // self.downsample_factor - 2)\n",
        "        label_length = np.zeros((batch_len, 1), dtype=np.int64)\n",
        "        \n",
        "        \n",
        "        for j, idx in enumerate(curr_batch_idx):\n",
        "            # 1. Get the image and transpose it\n",
        "            img = self.data[idx].T\n",
        "            # 2. Add extra dimenison\n",
        "            img = np.expand_dims(img, axis=-1)\n",
        "            # 3. Get the correpsonding label\n",
        "            text = self.labels[idx]\n",
        "            # 4. Include the pair only if the captcha is valid\n",
        "            if is_valid_captcha(text):\n",
        "                label = [self.char_map[ch] for ch in text]\n",
        "                batch_images[j] = img\n",
        "                batch_labels[j] = label\n",
        "                label_length[j] = len(text)\n",
        "        \n",
        "        batch_inputs = {\n",
        "                'input_data': batch_images,\n",
        "                'input_label': batch_labels,\n",
        "                'input_length': input_length,\n",
        "                'label_length': label_length,\n",
        "                }\n",
        "        return batch_inputs, np.zeros(batch_len).astype(np.float32)\n",
        "        \n",
        "    \n",
        "    def on_epoch_end(self):\n",
        "        if self.shuffle:\n",
        "            np.random.shuffle(self.indices)"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-N_sapOC5A6Q"
      },
      "source": [
        "# Batch size for training and validation\n",
        "batch_size = 16\n",
        "\n",
        "# Desired image dimensions\n",
        "img_width=200\n",
        "img_height=50 \n",
        "\n",
        "# Factor  by which the image is going to be downsampled\n",
        "# by the convolutional blocks\n",
        "downsample_factor=4\n",
        "\n",
        "# Maximum length of any captcha in the data\n",
        "max_length=5\n",
        "\n",
        "# Get a generator object for the training data\n",
        "train_data_generator = DataGenerator(data=training_data,\n",
        "                                     labels=training_labels,\n",
        "                                     char_map=char_to_labels,\n",
        "                                     batch_size=batch_size,\n",
        "                                     img_width=img_width,\n",
        "                                     img_height=img_height,\n",
        "                                     downsample_factor=downsample_factor,\n",
        "                                     max_length=max_length,\n",
        "                                     shuffle=True\n",
        "                                    )\n",
        "\n",
        "# Get a generator object for the validation data \n",
        "valid_data_generator = DataGenerator(data=validation_data,\n",
        "                                     labels=validation_labels,\n",
        "                                     char_map=char_to_labels,\n",
        "                                     batch_size=batch_size,\n",
        "                                     img_width=img_width,\n",
        "                                     img_height=img_height,\n",
        "                                     downsample_factor=downsample_factor,\n",
        "                                     max_length=max_length,\n",
        "                                     shuffle=False\n",
        "                                    )"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z3tWhn7U5A6R"
      },
      "source": [
        "class CTCLayer(layers.Layer):\n",
        "    def __init__(self, name=None):\n",
        "        super().__init__(name=name)\n",
        "        self.loss_fn = keras.backend.ctc_batch_cost\n",
        "\n",
        "    def call(self, y_true, y_pred, input_length, label_length):\n",
        "        # Compute the training-time loss value and add it\n",
        "        # to the layer using `self.add_loss()`.\n",
        "        loss = self.loss_fn(y_true, y_pred, input_length, label_length)\n",
        "        self.add_loss(loss)\n",
        "        \n",
        "        # On test time, just return the computed loss\n",
        "        return loss"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9AIDp1J28IZr"
      },
      "source": [
        "def build_model():\n",
        "    # Inputs to the model\n",
        "    input_img = layers.Input(shape=(img_width, img_height, 1),\n",
        "                            name='input_data',\n",
        "                            dtype='float32')\n",
        "    labels = layers.Input(name='input_label', shape=[max_length], dtype='float32')\n",
        "    input_length = layers.Input(name='input_length', shape=[1], dtype='int64')\n",
        "    label_length = layers.Input(name='label_length', shape=[1], dtype='int64')\n",
        "    \n",
        "    # First conv block\n",
        "    x = layers.Conv2D(32,\n",
        "               (3,3),\n",
        "               activation='relu',\n",
        "               kernel_initializer='he_normal',\n",
        "               padding='same',\n",
        "               name='Conv1')(input_img)\n",
        "    x = layers.MaxPooling2D((2,2), name='pool1')(x)\n",
        "    \n",
        "    # Second conv block\n",
        "    x = layers.Conv2D(64,\n",
        "               (3,3),\n",
        "               activation='relu',\n",
        "               kernel_initializer='he_normal',\n",
        "               padding='same',\n",
        "               name='Conv2')(x)\n",
        "    x = layers.MaxPooling2D((2,2), name='pool2')(x)\n",
        "    \n",
        "    # We have used two max pool with pool size and strides of 2.\n",
        "    # Hence, downsampled feature maps are 4x smaller. The number of\n",
        "    # filters in the last layer is 64. Reshape accordingly before\n",
        "    # passing it to RNNs\n",
        "    new_shape = ((img_width // 4), (img_height // 4)*64)\n",
        "    x = layers.Reshape(target_shape=new_shape, name='reshape')(x)\n",
        "    x = layers.Dense(64, activation='relu', name='dense1')(x)\n",
        "    x = layers.Dropout(0.2)(x)\n",
        "    \n",
        "    # RNNs\n",
        "    x = layers.Bidirectional(layers.LSTM(128,\n",
        "                                         return_sequences=True,\n",
        "                                         dropout=0.25))(x)\n",
        "    x = layers.Bidirectional(layers.LSTM(64,\n",
        "                                         return_sequences=True,\n",
        "                                         dropout=0.25))(x)\n",
        "    \n",
        "    # Predictions\n",
        "    x = layers.Dense(len(characters)+1,\n",
        "              activation='softmax', \n",
        "              name='dense2')(x)\n",
        "\n",
        "    # Calculate CTC\n",
        "    output = CTCLayer(name='ctc_loss')(labels, x, input_length, label_length)\n",
        "    \n",
        "    # Define the model\n",
        "    model = keras.models.Model(inputs=[input_img,\n",
        "                                       labels,\n",
        "                                       input_length,\n",
        "                                       label_length],\n",
        "                                outputs=output,\n",
        "                                name='ocr_model_v1')\n",
        "    \n",
        "    # Optimizer\n",
        "    opt = keras.optimizers.Adam()\n",
        "    \n",
        "    # Compile the model and return \n",
        "    model.compile(optimizer=opt)\n",
        "    return model"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zP59LiQM5A6U",
        "outputId": "2890212c-0a59-4aff-cf7e-197b6d37dd5e"
      },
      "source": [
        "model = build_model()\n",
        "model.summary()"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"ocr_model_v1\"\n",
            "__________________________________________________________________________________________________\n",
            "Layer (type)                    Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            "input_data (InputLayer)         [(None, 200, 50, 1)] 0                                            \n",
            "__________________________________________________________________________________________________\n",
            "Conv1 (Conv2D)                  (None, 200, 50, 32)  320         input_data[0][0]                 \n",
            "__________________________________________________________________________________________________\n",
            "pool1 (MaxPooling2D)            (None, 100, 25, 32)  0           Conv1[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "Conv2 (Conv2D)                  (None, 100, 25, 64)  18496       pool1[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "pool2 (MaxPooling2D)            (None, 50, 12, 64)   0           Conv2[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "reshape (Reshape)               (None, 50, 768)      0           pool2[0][0]                      \n",
            "__________________________________________________________________________________________________\n",
            "dense1 (Dense)                  (None, 50, 64)       49216       reshape[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "dropout (Dropout)               (None, 50, 64)       0           dense1[0][0]                     \n",
            "__________________________________________________________________________________________________\n",
            "bidirectional (Bidirectional)   (None, 50, 256)      197632      dropout[0][0]                    \n",
            "__________________________________________________________________________________________________\n",
            "bidirectional_1 (Bidirectional) (None, 50, 128)      164352      bidirectional[0][0]              \n",
            "__________________________________________________________________________________________________\n",
            "input_label (InputLayer)        [(None, 5)]          0                                            \n",
            "__________________________________________________________________________________________________\n",
            "dense2 (Dense)                  (None, 50, 20)       2580        bidirectional_1[0][0]            \n",
            "__________________________________________________________________________________________________\n",
            "input_length (InputLayer)       [(None, 1)]          0                                            \n",
            "__________________________________________________________________________________________________\n",
            "label_length (InputLayer)       [(None, 1)]          0                                            \n",
            "__________________________________________________________________________________________________\n",
            "ctc_loss (CTCLayer)             (None, 1)            0           input_label[0][0]                \n",
            "                                                                 dense2[0][0]                     \n",
            "                                                                 input_length[0][0]               \n",
            "                                                                 label_length[0][0]               \n",
            "==================================================================================================\n",
            "Total params: 432,596\n",
            "Trainable params: 432,596\n",
            "Non-trainable params: 0\n",
            "__________________________________________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oL3RE7lG5A6V",
        "outputId": "44832086-de25-479c-94f6-8b13ca822254"
      },
      "source": [
        "# Add early stopping\n",
        "es = keras.callbacks.EarlyStopping(monitor='val_loss',\n",
        "                                   patience=5,\n",
        "                                   restore_best_weights=True)\n",
        "\n",
        "# Train the model\n",
        "history = model.fit_generator(train_data_generator,\n",
        "                              epochs =  100,\n",
        "                           validation_data=valid_data_generator,\n",
        "                              verbose = 1, \n",
        "                              callbacks=[es])\n"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1940: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  warnings.warn('`Model.fit_generator` is deprecated and '\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "59/59 [==============================] - 40s 51ms/step - loss: 20.7629 - val_loss: 16.3811\n",
            "Epoch 2/100\n",
            "59/59 [==============================] - 2s 28ms/step - loss: 16.3374 - val_loss: 16.3830\n",
            "Epoch 3/100\n",
            "59/59 [==============================] - 2s 27ms/step - loss: 16.3369 - val_loss: 16.3819\n",
            "Epoch 4/100\n",
            "59/59 [==============================] - 2s 27ms/step - loss: 16.3387 - val_loss: 16.3858\n",
            "Epoch 5/100\n",
            "59/59 [==============================] - 2s 27ms/step - loss: 16.3420 - val_loss: 16.4280\n",
            "Epoch 6/100\n",
            "59/59 [==============================] - 2s 27ms/step - loss: 16.3416 - val_loss: 16.4055\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "NcWM_hShTqsZ",
        "outputId": "2fd496e5-6028-4c6f-a5f1-91bd64bae074"
      },
      "source": [
        "\n",
        "plt.plot(history.history['loss'], color='b', label=\"Training loss\")\n",
        "plt.plot(history.history['val_loss'], color='r', label=\"validation loss\")\n"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f9cf81566d0>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cyWZ-BG45A6W",
        "outputId": "09cc95cd-61ae-415c-8fac-e37207319749"
      },
      "source": [
        "prediction_model = keras.models.Model(model.get_layer(name='input_data').input,\n",
        "                                        model.get_layer(name='dense2').output)\n",
        "prediction_model.summary()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"model\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "input_data (InputLayer)      [(None, 200, 50, 1)]      0         \n",
            "_________________________________________________________________\n",
            "Conv1 (Conv2D)               (None, 200, 50, 32)       320       \n",
            "_________________________________________________________________\n",
            "pool1 (MaxPooling2D)         (None, 100, 25, 32)       0         \n",
            "_________________________________________________________________\n",
            "Conv2 (Conv2D)               (None, 100, 25, 64)       18496     \n",
            "_________________________________________________________________\n",
            "pool2 (MaxPooling2D)         (None, 50, 12, 64)        0         \n",
            "_________________________________________________________________\n",
            "reshape (Reshape)            (None, 50, 768)           0         \n",
            "_________________________________________________________________\n",
            "dense1 (Dense)               (None, 50, 64)            49216     \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 50, 64)            0         \n",
            "_________________________________________________________________\n",
            "bidirectional (Bidirectional (None, 50, 256)           197632    \n",
            "_________________________________________________________________\n",
            "bidirectional_1 (Bidirection (None, 50, 128)           164352    \n",
            "_________________________________________________________________\n",
            "dense2 (Dense)               (None, 50, 20)            2580      \n",
            "=================================================================\n",
            "Total params: 432,596\n",
            "Trainable params: 432,596\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-vFCtymg5A6X"
      },
      "source": [
        "# A utility to decode the output of the network\n",
        "def decode_batch_predictions(pred):\n",
        "    pred = pred[:, :-2]\n",
        "    input_len = np.ones(pred.shape[0])*pred.shape[1]\n",
        "    \n",
        "    # Use greedy search. For complex tasks, you can use beam search\n",
        "    results = keras.backend.ctc_decode(pred, \n",
        "                                        input_length=input_len,\n",
        "                                        greedy=True)[0][0]\n",
        "    \n",
        "    # Iterate over the results and get back the text\n",
        "    output_text = []\n",
        "    for res in results.numpy():\n",
        "        outstr = ''\n",
        "        for c in res:\n",
        "            if c < len(characters) and c >=0:\n",
        "                outstr += labels_to_char[c]\n",
        "        output_text.append(outstr)\n",
        "    \n",
        "    # return final text results\n",
        "    return output_text"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aIUaZ4t05A6X",
        "outputId": "fab8d170-ca76-439c-c4e3-68cf15c2a0bc"
      },
      "source": [
        "#  Let's check results on some validation samples\n",
        "for p, (inp_value, _) in enumerate(valid_data_generator):\n",
        "    bs = inp_value['input_data'].shape[0]\n",
        "    X_data = inp_value['input_data']\n",
        "    labels = inp_value['input_label']\n",
        "    \n",
        "    preds = prediction_model.predict(X_data)\n",
        "    pred_texts = decode_batch_predictions(preds)\n",
        "    \n",
        "    \n",
        "    orig_texts = []\n",
        "    for label in labels:\n",
        "        text = ''.join([labels_to_char[int(x)] for x in label])\n",
        "        orig_texts.append(text)\n",
        "        \n",
        "    for i in range(bs):\n",
        "        print(f'Ground truth: {orig_texts[i]} \\t Predicted: {pred_texts[i]}')\n",
        "    break"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Ground truth: b3xpn \t Predicted: \n",
            "Ground truth: gnbde \t Predicted: \n",
            "Ground truth: b5dn4 \t Predicted: \n",
            "Ground truth: ppx77 \t Predicted: \n",
            "Ground truth: b4ncn \t Predicted: \n",
            "Ground truth: dw6mn \t Predicted: \n",
            "Ground truth: mwdf6 \t Predicted: \n",
            "Ground truth: wyc25 \t Predicted: \n",
            "Ground truth: 36bc2 \t Predicted: \n",
            "Ground truth: nm248 \t Predicted: \n",
            "Ground truth: f74x3 \t Predicted: \n",
            "Ground truth: g247w \t Predicted: \n",
            "Ground truth: 77387 \t Predicted: \n",
            "Ground truth: nbf8m \t Predicted: \n",
            "Ground truth: 6c3p5 \t Predicted: \n",
            "Ground truth: mwxwp \t Predicted: \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MFVqIQc-pNy9"
      },
      "source": [
        "import keras\n",
        "import pytesseract"
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B-OS1rLIq7n-",
        "outputId": "d5e08c44-c5d9-43b0-f976-01d82fdbd54a"
      },
      "source": [
        "!pip install pytesseract"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting pytesseract\n",
            "  Downloading pytesseract-0.3.8.tar.gz (14 kB)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.7/dist-packages (from pytesseract) (7.1.2)\n",
            "Building wheels for collected packages: pytesseract\n",
            "  Building wheel for pytesseract (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pytesseract: filename=pytesseract-0.3.8-py2.py3-none-any.whl size=14071 sha256=bfd751dd4724d88f01b3a1f8fb430af4dbfe3d00756712ec855efe5680af62a0\n",
            "  Stored in directory: /root/.cache/pip/wheels/a4/89/b9/3f11250225d0f90e5454fcc30fd1b7208db226850715aa9ace\n",
            "Successfully built pytesseract\n",
            "Installing collected packages: pytesseract\n",
            "Successfully installed pytesseract-0.3.8\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zC_pPYQctUWC",
        "outputId": "1bd9eac8-0246-4e6b-d8a6-5d5c55e411b1"
      },
      "source": [
        "!sudo apt install tesseract-ocr"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Reading package lists... Done\n",
            "Building dependency tree       \n",
            "Reading state information... Done\n",
            "The following additional packages will be installed:\n",
            "  tesseract-ocr-eng tesseract-ocr-osd\n",
            "The following NEW packages will be installed:\n",
            "  tesseract-ocr tesseract-ocr-eng tesseract-ocr-osd\n",
            "0 upgraded, 3 newly installed, 0 to remove and 40 not upgraded.\n",
            "Need to get 4,795 kB of archives.\n",
            "After this operation, 15.8 MB of additional disk space will be used.\n",
            "Get:1 http://archive.ubuntu.com/ubuntu bionic/universe amd64 tesseract-ocr-eng all 4.00~git24-0e00fe6-1.2 [1,588 kB]\n",
            "Get:2 http://archive.ubuntu.com/ubuntu bionic/universe amd64 tesseract-ocr-osd all 4.00~git24-0e00fe6-1.2 [2,989 kB]\n",
            "Get:3 http://archive.ubuntu.com/ubuntu bionic/universe amd64 tesseract-ocr amd64 4.00~git2288-10f4998a-2 [218 kB]\n",
            "Fetched 4,795 kB in 2s (2,929 kB/s)\n",
            "debconf: unable to initialize frontend: Dialog\n",
            "debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76, <> line 3.)\n",
            "debconf: falling back to frontend: Readline\n",
            "debconf: unable to initialize frontend: Readline\n",
            "debconf: (This frontend requires a controlling tty.)\n",
            "debconf: falling back to frontend: Teletype\n",
            "dpkg-preconfigure: unable to re-open stdin: \n",
            "Selecting previously unselected package tesseract-ocr-eng.\n",
            "(Reading database ... 160837 files and directories currently installed.)\n",
            "Preparing to unpack .../tesseract-ocr-eng_4.00~git24-0e00fe6-1.2_all.deb ...\n",
            "Unpacking tesseract-ocr-eng (4.00~git24-0e00fe6-1.2) ...\n",
            "Selecting previously unselected package tesseract-ocr-osd.\n",
            "Preparing to unpack .../tesseract-ocr-osd_4.00~git24-0e00fe6-1.2_all.deb ...\n",
            "Unpacking tesseract-ocr-osd (4.00~git24-0e00fe6-1.2) ...\n",
            "Selecting previously unselected package tesseract-ocr.\n",
            "Preparing to unpack .../tesseract-ocr_4.00~git2288-10f4998a-2_amd64.deb ...\n",
            "Unpacking tesseract-ocr (4.00~git2288-10f4998a-2) ...\n",
            "Setting up tesseract-ocr-osd (4.00~git24-0e00fe6-1.2) ...\n",
            "Setting up tesseract-ocr-eng (4.00~git24-0e00fe6-1.2) ...\n",
            "Setting up tesseract-ocr (4.00~git2288-10f4998a-2) ...\n",
            "Processing triggers for man-db (2.8.3-2ubuntu0.1) ...\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}